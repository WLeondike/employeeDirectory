{"version":3,"sources":["components/Header.js","components/EmpArea.js","utils/API.js","components/UserSearch.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","EmpArea","nameFilter","map","emp","key","indexOf","src","picture","medium","alt","name","first","last","phone","email","location","city","dob","date","split","axios","get","UserSearch","state","search","sort","results","handleInputChange","event","preventDefault","setState","target","value","handleSort","API","then","res","data","catch","err","console","log","this","filter","toLowerCase","start","finish","empFirst","toUpperCase","empLast","compare","type","placeholder","onChange","bind","onClick","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6RAeeA,G,6KAVX,OACE,yBAAKC,UAAU,8CACb,yBAAKA,UAAU,aACb,wD,GALWC,cCmBNC,MApBf,YAAkC,IAAfC,EAAc,EAAdA,WACjB,OACE,oCACGA,EAAWC,KAAI,SAACC,GAAD,OACd,yBAAKL,UAAU,eAAeM,IAAKH,EAAWI,QAAQF,IACpD,yBAAKL,UAAU,YACb,yBAAKQ,IAAKH,EAAII,QAAQC,OAAQC,IAAI,aAEpC,yBAAKX,UAAU,YAAYK,EAAIO,KAAKC,OACpC,yBAAKb,UAAU,YAAYK,EAAIO,KAAKE,MACpC,yBAAKd,UAAU,YAAYK,EAAIU,OAC/B,yBAAKf,UAAU,YAAYK,EAAIW,OAC/B,yBAAKhB,UAAU,YAAYK,EAAIY,SAASC,MACxC,yBAAKlB,UAAU,YAAYK,EAAIc,IAAIC,KAAKC,MAAM,KAAK,U,iBCZ9C,EACH,WACR,OAAOC,IAAMC,IAAI,iDCuGNC,E,4MAvGbC,MAAQ,CACNC,OAAQ,GACRC,KAAM,GACNC,QAAS,I,EASXC,kBAAoB,SAACC,GACnBA,EAAMC,iBACN,EAAKC,SAAS,CAAEN,OAAQI,EAAMG,OAAOC,S,EAGvCC,WAAa,WACa,eAApB,EAAKV,MAAME,MAA6C,cAApB,EAAKF,MAAME,KACjD,EAAKK,SAAS,CAAEL,KAAM,cAEF,cAApB,EAAKF,MAAME,MACS,eAApB,EAAKF,MAAME,MAEX,EAAKK,SAAS,CAAEL,KAAM,gB,kEAlBL,IAAD,OAClBS,IACGC,MAAK,SAACC,GAAD,OAAS,EAAKN,SAAS,CAAEJ,QAASU,EAAIC,KAAKX,aAChDY,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAmBtB,IAAD,OACHtC,EAAayC,KAAKnB,MAAMG,QAAQiB,QAAO,SAACxC,GAC1C,OAGmD,IAFjDA,EAAIO,KAAKE,KACNgC,cACAvC,QAAQ,EAAKkB,MAAMC,OAAOoB,kBAkCjC,MANwB,cAApBF,KAAKnB,MAAME,KACbxB,EAAWwB,MAzBK,SAACoB,EAAOC,GACxB,IAAMC,EAAWF,EAAMnC,KAAKE,KAAKoC,cAC3BC,EAAUH,EAAOpC,KAAKE,KAAKoC,cAC7BE,EAAU,EAMd,OALIH,EAAWE,EACbC,EAAU,EACDH,EAAWE,IACpBC,GAAW,GAEI,EAAVA,KAiBsB,eAApBR,KAAKnB,MAAME,MACpBxB,EAAWwB,MAfM,SAACoB,EAAOC,GACzB,IAAMC,EAAWF,EAAMnC,KAAKE,KAAKoC,cAC3BC,EAAUH,EAAOpC,KAAKE,KAAKoC,cAC7BE,EAAU,EAMd,OALIH,EAAWE,EACbC,EAAU,EACDH,EAAWE,IACpBC,GAAW,IAEK,EAAXA,KAUP,yBAAKpD,UAAU,IACb,0BAAMA,UAAU,eACd,2BACEA,UAAU,cACVqD,KAAK,OACLC,YAAY,wBACZpB,MAAOU,KAAKnB,MAAMC,OAClB6B,SAAUX,KAAKf,kBAAkB2B,KAAKZ,SAG1C,6BACA,yBAAK5C,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qBAAf,YACA,yBAAKA,UAAU,qBAAf,cACA,yBAAKA,UAAU,qBACf,4BAAQA,UAAU,WAAWyD,QAASb,KAAKT,YAA3C,cAIA,yBAAKnC,UAAU,qBAAf,gBACA,yBAAKA,UAAU,qBAAf,SACA,yBAAKA,UAAU,qBAAf,YACA,yBAAKA,UAAU,qBAAf,QAEF,6BACA,6BACE,kBAAC,EAAD,CAASG,WAAYA,W,GAhGRF,aCeVyD,MAff,WACE,OACE,oCACE,kBAAC,EAAD,MACA,yBAAK1D,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,WCCQ2D,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.a5df36d4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\"\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header bg-info text-white text-center mb-4\">\r\n        <div className=\"container\">\r\n          <h1>Employee Directory</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction EmpArea({ nameFilter }) {\r\n  return (\r\n    <>\r\n      {nameFilter.map((emp) => (\r\n        <div className=\"row emp-card\" key={nameFilter.indexOf(emp)}>\r\n          <div className=\"col-md-1\">\r\n            <img src={emp.picture.medium} alt=\"Emp Img\" />\r\n          </div>\r\n          <div className=\"col-md-1\">{emp.name.first}</div>\r\n          <div className=\"col-md-2\">{emp.name.last}</div>\r\n          <div className=\"col-md-2\">{emp.phone}</div>\r\n          <div className=\"col-md-3\">{emp.email}</div>\r\n          <div className=\"col-md-1\">{emp.location.city}</div>\r\n          <div className=\"col-md-2\">{emp.dob.date.split(\"T\")[0]}</div>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmpArea;\r\n","import axios from \"axios\";\r\n\r\n// Get random users from API\r\nexport default {\r\n  getUsers: () => {\r\n    return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\r\n  }\r\n};","import React, { Component } from \"react\";\r\nimport EmpArea from \"./EmpArea\";\r\nimport API from \"../utils/API\";\r\n\r\nclass UserSearch extends Component {\r\n  state = {\r\n    search: \"\",\r\n    sort: \"\",\r\n    results: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getUsers()\r\n      .then((res) => this.setState({ results: res.data.results }))\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ search: event.target.value });\r\n  };\r\n\r\n  handleSort = () => {\r\n    if (this.state.sort === \"descending\" || this.state.sort !== \"ascending\") {\r\n      this.setState({ sort: \"ascending\" });\r\n    } else if (\r\n      this.state.sort === \"ascending\" ||\r\n      this.state.sort !== \"descending\"\r\n    ) {\r\n      this.setState({ sort: \"descending\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let nameFilter = this.state.results.filter((emp) => {\r\n      return (\r\n        emp.name.last\r\n          .toLowerCase()\r\n          .indexOf(this.state.search.toLowerCase()) !== -1\r\n      );\r\n    });\r\n\r\n    const ascending = (start, finish) => {\r\n      const empFirst = start.name.last.toUpperCase();\r\n      const empLast = finish.name.last.toUpperCase();\r\n      let compare = 0;\r\n      if (empFirst > empLast) {\r\n        compare = 1;\r\n      } else if (empFirst < empLast) {\r\n        compare = -1;\r\n      }\r\n      return compare * 1;\r\n    };\r\n\r\n    const descending = (start, finish) => {\r\n      const empFirst = start.name.last.toUpperCase();\r\n      const empLast = finish.name.last.toUpperCase();\r\n      let compare = 0;\r\n      if (empFirst > empLast) {\r\n        compare = 1;\r\n      } else if (empFirst < empLast) {\r\n        compare = -1;\r\n      }\r\n      return compare * -1;\r\n    };\r\n\r\n    if (this.state.sort === \"ascending\") {\r\n      nameFilter.sort(ascending);\r\n    } else if (this.state.sort === \"descending\") {\r\n      nameFilter.sort(descending);\r\n    }\r\n\r\n    return (\r\n      <div className=\"\">\r\n        <form className=\"text-center\">\r\n          <input\r\n            className=\"text-center\"\r\n            type=\"text\"\r\n            placeholder=\"Employee's Last Name?\"\r\n            value={this.state.search}\r\n            onChange={this.handleInputChange.bind(this)}\r\n          />\r\n        </form>\r\n        <br />\r\n        <div className=\"table-content\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-1 headings\">Photo ID</div>\r\n            <div className=\"col-md-1 headings\">First Name</div>\r\n            <div className=\"col-md-2 headings\">\r\n            <button className=\"btn-info\" onClick={this.handleSort}>\r\n              Last Name\r\n            </button>\r\n            </div>\r\n            <div className=\"col-md-2 headings\">Phone Number</div>\r\n            <div className=\"col-md-3 headings\">Email</div>\r\n            <div className=\"col-md-1 headings\">Location</div>\r\n            <div className=\"col-md-2 headings\">DOB</div>\r\n          </div>\r\n          <hr />\r\n          <div>\r\n            <EmpArea nameFilter={nameFilter} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default UserSearch;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport UserSearch from \"./components/UserSearch\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <div className=\"App container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <UserSearch />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}